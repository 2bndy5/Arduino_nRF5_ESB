name: PlatformIO build

on:
  pull_request:
    types: [opened, reopened]
  push:
  release:
    types: [published]

jobs:
  validate_lib_json:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: get latest release version number
        id: latest_ver
        run: echo "release=$(awk -F '=' '/version/ {print $2}' library.properties)" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio

      - name: package lib
        run: pio package pack -o PlatformIO-nRF5_ESB-${{ steps.latest_ver.outputs.release }}.tar.gz

      - name: Save artifact
        uses: actions/upload-artifact@v4
        with:
          name: "PIO_pkg_nRF5_ESB"
          path: PlatformIO*.tar.gz

      - name: Upload Release assets
        if: github.event_name == 'release'
        uses: csexton/release-asset-action@master
        with:
          pattern: "PlatformIO*.tar.gz"
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: upload package to PlatformIO Registry
        if: github.event_name == 'release'
        # PIO lib packages cannot be re-published under the same tag
        env:
          PLATFORMIO_AUTH_TOKEN: ${{ secrets.PLATFORMIO_AUTH_TOKEN }}
        run: pio package publish --owner nrf24 --non-interactive


  check_formatting:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Install clang-format
        run: sudo apt-get install clang-format-12
      - name: Install linter python package
        run: python3 -m pip install cpp-linter
      - name: run linter as a python package
        id: linter
        run: |
          cpp-linter \
          --version=12 \
          --style=file \
          --tidy-checks='-*' \
          --files-changed-only='False' \
          --extensions=ino \
          --ignore='examples/old_backups'
      - name: Linter checks failed?
        if: steps.linter.outputs.checks-failed > 0
        run: exit 1

  build:
    needs: [check_formatting, validate_lib_json]
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false

      matrix:
        example:
          - "examples/GettingStarted/GettingStarted.ino"
        board:
          - "adafruit_feather_nrf52840"
          - "nrf52840_dk_adafruit"
          - "particle_xenon"

    steps:
    - uses: actions/checkout@v4
    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.x
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio
    - name: Run PlatformIO
      run: pio ci --lib="." --board=${{ matrix.board }}
      env:
        PLATFORMIO_CI_SRC: ${{ matrix.example }}
